package handler_test

import (
	"context"
	"encoding/json"
	"errors"
	"net/http"
	"net/http/httptest"
	"testing"

	"github.com/gin-gonic/gin"
	"github.com/maxviazov/basketball-stats-service/internal/handler"
	"github.com/maxviazov/basketball-stats-service/internal/model"
	"github.com/maxviazov/basketball-stats-service/internal/repository"
	"github.com/maxviazov/basketball-stats-service/internal/service"
	"github.com/stretchr/testify/require"
)

// stubPlayerServiceForStats is a mock implementation for player stats tests.
type stubPlayerServiceForStats struct {
	service.PlayerService // Embed interface to avoid implementing all methods
	statsRes              model.PlayerAggregatedStats
	statsErr              error
}

func (s *stubPlayerServiceForStats) GetPlayerAggregatedStats(ctx context.Context, playerID int64, season *string) (model.PlayerAggregatedStats, error) {
	return s.statsRes, s.statsErr
}

// stubTeamServiceForStats is a mock implementation for team stats tests.
type stubTeamServiceForStats struct {
	service.TeamService // Embed interface to avoid implementing all methods
	statsRes            model.TeamAggregatedStats
	statsErr            error
}

func (s *stubTeamServiceForStats) GetTeamAggregatedStats(ctx context.Context, teamID int64, season *string) (model.TeamAggregatedStats, error) {
	return s.statsRes, s.statsErr
}

func setupRouterForStats(playerSvc service.PlayerService, teamSvc service.TeamService) *gin.Engine {
	gin.SetMode(gin.TestMode)
	r := gin.New()
	api := r.Group("/api/v1") // Use versioned group
	handler.NewPlayerHandler(playerSvc).Register(api)
	handler.NewTeamHandler(teamSvc).Register(api)
	return r
}

func TestPlayerStatsHandler(t *testing.T) {
	stub := &stubPlayerServiceForStats{}
	r := setupRouterForStats(stub, nil)

	t.Run("Success - Career Stats", func(t *testing.T) {
		stub.statsRes = model.PlayerAggregatedStats{GamesPlayed: 820, TotalPoints: 24600}
		stub.statsErr = nil

		w := httptest.NewRecorder()
		// Test with career=true
		req, _ := http.NewRequest(http.MethodGet, "/api/v1/players/1/aggregates?career=true", nil)
		r.ServeHTTP(w, req)

		require.Equal(t, http.StatusOK, w.Code)
		var body model.PlayerAggregatedStats
		_ = json.Unmarshal(w.Body.Bytes(), &body)
		require.Equal(t, 24600, body.TotalPoints)
	})

	t.Run("Not Found", func(t *testing.T) {
		stub.statsErr = repository.ErrNotFound

		w := httptest.NewRecorder()
		req, _ := http.NewRequest(http.MethodGet, "/api/v1/players/999/aggregates", nil)
		r.ServeHTTP(w, req)

		require.Equal(t, http.StatusNotFound, w.Code)
	})

	t.Run("Invalid Input - Mutually Exclusive Params", func(t *testing.T) {
		w := httptest.NewRecorder()
		req, _ := http.NewRequest(http.MethodGet, "/api/v1/players/1/aggregates?season=2023-24&career=true", nil)
		r.ServeHTTP(w, req)

		require.Equal(t, http.StatusBadRequest, w.Code)
		require.Contains(t, w.Body.String(), "mutually exclusive")
	})

	t.Run("Internal Server Error", func(t *testing.T) {
		stub.statsErr = errors.New("unexpected database error")

		w := httptest.NewRecorder()
		req, _ := http.NewRequest(http.MethodGet, "/api/v1/players/1/aggregates", nil)
		r.ServeHTTP(w, req)

		require.Equal(t, http.StatusInternalServerError, w.Code)
		require.Contains(t, w.Body.String(), "internal_error")
	})
}

func TestTeamStatsHandler(t *testing.T) {
	stub := &stubTeamServiceForStats{}
	r := setupRouterForStats(nil, stub)

	t.Run("Success - Seasonal Stats", func(t *testing.T) {
		stub.statsRes = model.TeamAggregatedStats{Wins: 50, Losses: 32}
		stub.statsErr = nil

		w := httptest.NewRecorder()
		req, _ := http.NewRequest(http.MethodGet, "/api/v1/teams/1/aggregates?season=2023-24", nil)
		r.ServeHTTP(w, req)

		require.Equal(t, http.StatusOK, w.Code)
		var body model.TeamAggregatedStats
		_ = json.Unmarshal(w.Body.Bytes(), &body)
		require.Equal(t, 50, body.Wins)
	})

	t.Run("Invalid Input - Bad ID", func(t *testing.T) {
		// This error is now generated by the service layer, not the handler, but the outcome is the same.
		stub.statsErr = service.NewInvalidInputError([]service.FieldError{{Field: "id", Message: "must be > 0"}})

		w := httptest.NewRecorder()
		req, _ := http.NewRequest(http.MethodGet, "/api/v1/teams/0/aggregates", nil)
		r.ServeHTTP(w, req)

		require.Equal(t, http.StatusBadRequest, w.Code)
		require.Contains(t, w.Body.String(), "invalid_input")
	})
}
