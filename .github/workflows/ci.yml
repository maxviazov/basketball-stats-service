name: CI

on:
  push:
    branches: [main, feature/**]
  pull_request:
    branches: [main]

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-test:
    runs-on: ubuntu-24.04

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: basketball_ci
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres -d basketball_ci"
          --health-interval=5s
          --health-timeout=5s
          --health-retries=20

    env:
      DATABASE_URL: postgres://postgres:postgres@localhost:5432/basketball_ci?sslmode=disable
      CONTRACT_TESTS: "1"
      APP_POSTGRES_USER: postgres
      APP_POSTGRES_PASSWORD: postgres
      APP_POSTGRES_DB: basketball_ci

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Go
        uses: actions/setup-go@v6
        with:
          go-version: 1.25.x
          check-latest: true
          cache: true

      - name: Go env
        run: go env

      - name: Check formatting
        run: |
          test -z "$(gofmt -l .)" || (echo "gofmt found unformatted files"; gofmt -l .; exit 1)

      - name: Vet
        run: go vet ./...

      - name: Lint (golangci-lint)
        uses: golangci/golangci-lint-action@v8
        with:
          version: latest
          args: --timeout=5m

      - name: Validate OpenAPI (Redocly)
        run: |
          npm i -g @redocly/cli
          redocly lint api/openapi.yaml

      - name: Wait for Postgres (service health)
        run: |
          for i in {1..30}; do
            pg_isready -h localhost -p 5432 -d basketball_ci -U postgres && break
            echo "waiting for postgres..."; sleep 2
          done

      - name: Apply DB migrations (goose up)
        run: |
          go run github.com/pressly/goose/v3/cmd/goose@latest -dir ./migrations/goose_sql postgres "$DATABASE_URL" up

      - name: Show migration status
        run: |
          go run github.com/pressly/goose/v3/cmd/goose@latest -dir ./migrations/goose_sql postgres "$DATABASE_URL" status || true

      - name: Run tests (unit + contract) with coverage
        run: |
          make test

      - name: Upload coverage artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: coverage.out

      - name: Coverage summary
        if: success()
        run: |
          go tool cover -func=coverage.out | tail -n 1
